- Implement Loading applications from supplied jar files
  We should then be able to package multiple applications
  into one jar file and let the loader find them.

  Alternatively we can stick to "applicationName.jar" which will
  contain:
  /-
    com/
        fastagi/
            application/
                ApplicationName.class
                OtherSupporting.class



    
- Encapsulate the AGI requests and responses into Request and response
  objects in a nice way, so we don't leak out the internals into the application
  and also, in a way to allow us to easily continue with the State Machine approach
  to building applications.

  for instance:

    session ! AgiGetData("filename", timeout, maxDigits)

        loop {
            react {
                case AgiGetDataResponse(value) =>                    
                    updateDb(value)
                    session ! AgiSayDate("22/08/2008")

                case AgiSayDateResponse(Error) =>
                    logToLogfile()
                    session ! CloseSession

                case AgiSayDateResponse(Success) =>
                    session ! AgiSayAlpha("Thank you. Good bye")
                    session ! AgiHangup
                    
                case CloseSession =>
                    exit()

                case _ =>
                    logToLogfile()
                    
            }                
        }

