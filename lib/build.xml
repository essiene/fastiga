<project default="compile" basedir=".">
    <description>Weaver generated build script</description>

    <property file="build.properties"/>
    <property file="${user.homedir}/.weaver/weaver.properties"/>
    <property file="/etc/weaver/weaver.properties"/>

    <path id="scala.classpath">
        <pathelement location="${scala.home}/lib/scala-compiler.jar"/>
        <pathelement location="${scala.home}/lib/scala-library.jar"/>
    </path>


    <path id="compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>

        <pathelement location="${catalina.common.classes}"/>

        <fileset dir="${catalina.common.lib}">
            <include name="*.jar"/>
        </fileset>

        <fileset dir="${catalina.common.endorsed}">
            <include name="*.jar"/>
        </fileset>

        <pathelement location="${catalina.shared.classes}"/>

        <fileset dir="${catalina.shared.lib}">
            <include name="*.jar"/>
        </fileset>

        <path refid="scala.classpath"/>

    </path>

    <path id="test.classpath">
        <pathelement location="${test.dir}"/>
        <pathelement location="${build.classes}"/>
        <path refid="compile.classpath"/>
    </path>

    <target name="settings">
        <echo message="project.name = ${project.name}"/>
        <echo message=""/>
        <echo message="src.dir = ${src.dir}"/>
        <echo message="lib.dir = ${lib.dir}"/>
        <echo message="build.dir = ${build.dir}"/>
        <echo message="dist.dir = ${dist.dir}"/>
        <echo message="test.dir = ${test.dir}"/>
        <echo message="test.classes = ${test.classes}"/>
    </target>

    <taskdef resource="scala/tools/ant/antlib.xml">
        <classpath refid="scala.classpath"/>
    </taskdef>

    <target name="init-project">
        <mkdir dir="${src.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${test.dir}"/>
        <mkdir dir="${package.dir}"/>
        <mkdir dir="${javacc.srcdir}"/>
    </target>

    <target name="parsergenclean">
        <delete>
            <fileset dir="${javacc.srcdir}">
                <include name="*.java"/>
            </fileset>
        </delete>
    </target>

    <target name="clean" depends="parsergenclean">
        <delete dir="${build.dir}"/>
    </target>


    <target name="testclean">
        <delete dir="${test.classes}"/>
    </target>


    <target name="distclean">
        <delete dir="${dist.dir}"/>
    </target>


    <target name="resources">
        <mkdir dir="${build.classes}"/>
        <copy todir="${build.classes}" includeEmptyDirs="no">
            <fileset dir="${src.dir}">
                <include name="*.properties"/>
                <include name="*.conf"/>
                <include name="*.xml"/>
            </fileset>
        </copy>
    </target>


    <target name="parsergen">
        <javacc 
            static="false" 
            target="${javacc.target}"
            javacchome="${javacc.home}"/>
    </target>

    <target name="compile-with-parser" depends="parsergen">
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${lib.dir}"/>
        <javac srcdir="${src.dir}" destdir="${build.classes}">
            <classpath refid="compile.classpath"/>
        </javac>
        <scalac srcdir="${src.dir}" destdir="${build.classes}" classpathref="compile.classpath">
            <include name="**/*.scala"/>
        </scalac>
    </target>

    <target name="compile">
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${lib.dir}"/>
        <javac srcdir="${src.dir}" destdir="${build.classes}">
            <classpath refid="compile.classpath"/>
        </javac>
        <scalac srcdir="${src.dir}" destdir="${build.classes}" classpathref="compile.classpath">
            <include name="**/*.scala"/>
        </scalac>
    </target>


    <target name="compiletest" depends="compile">
        <mkdir dir="${test.classes}"/>
        <javac srcdir="${test.dir}" destdir="${test.classes}">
            <classpath refid="test.classpath"/>
            <include name="**/*.java"/>
        </javac>
        <scalac srcdir="${test.dir}" destdir="${test.dir}">
            <classpath refid="test.classpath"/>
            <include name="**/*.scala"/>
        </scalac>
</target>


    <target name="test" depends="compiletest">
        <junit printsummary="false" haltonfailure="no" showoutput="no" filtertrace="yes">
            <classpath refid="test.classpath"/>

            <batchtest fork="yes">
                <formatter type="brief" usefile="false"/>
                <fileset dir="${test.classes}" includes="**/*.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="dist-with-parser" depends="resources, compile-with-parser">
        <mkdir dir="${build.dir}"/>
        <delete dir="${test.classes}"/>
        <mkdir dir="${dist.dir}"/>
        <jar basedir="${build.dir}" jarfile="${dist.dir}/${project.name}.jar"/>
    </target>

    <target name="dist" depends="resources, compile">
        <mkdir dir="${build.dir}"/>
        <delete dir="${test.classes}"/>
        <mkdir dir="${dist.dir}"/>
        <jar basedir="${build.dir}" jarfile="${dist.dir}/${project.name}.jar"/>
    </target>

    <target name="deploy" depends="dist">
        <copy todir="${catalina.home}/common/lib" file="${dist.dir}/${project.name}.jar"/>
    </target>

    <target name="javadoc" description="Generate JavaDoc API docs" depends="dist">
        <delete dir="${doc.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <javadoc sourcepath="${src.dir}"
            destdir="${doc.dir}"
            classpath="${dist.dir}/${project.name}.jar"
            packagenames="*"
            author="false"
            private="false"
            version="true"
            windowtitle="${project.name} API Documentation"
            doctitle="&lt;h1&gt;${project.name} Documentation &lt;/h1&gt;">
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>

    <target name="all" depends="clean, distclean, dist-with-parser"/>
    <target name="allclean" depends="clean, testclean, distclean"/>
</project>
