options {
   STATIC = false;
   LOOKAHEAD = 2;
}

PARSER_BEGIN(Parser)
    package com.fastagi.util.parser;

    import java.util.*;

    public class Parser {        
        Hashtable table = new Hashtable();
        String data = "";
        public static void main(String args[]) {            
            Parser parser = new Parser(System.in);
            try {
                parser.parseOneLine();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
    }
PARSER_END(Parser)

SKIP: {"\n"|"\r"|"\r\n"|"\t"}
TOKEN: {<CODE: "200">}
TOKEN: {<SPACE: " ">}
TOKEN: {<RESULT: "result">}
TOKEN: {<EQUALS: "=">}
TOKEN: {<DIGIT: (["0"-"9"])+>}
TOKEN: {<SIGN: "-">}
TOKEN: {<BROPEN: "(">}
TOKEN: {<BRCLOSE: ")">}
TOKEN: {<ID: "endpos">}
TOKEN: {<DATA: ~[]>}
TOKEN: {<#LETTER: ["a"-"z","A"-"Z"]>}

Hashtable parseOneLine() throws Exception:
{
   Token rvalue;
   Token sign = null;
}
{
    <CODE> (<SPACE>)+ <RESULT> (<SPACE>)* <EQUALS> (<SPACE>)* (sign=<SIGN>)? rvalue=<DIGIT> 
        (
         (<SPACE>)+
          (getOthers())?
          (<BROPEN>(getData())+<BRCLOSE>)?
        )?<EOF>
    {
        table.put("data", data.toString());
        String value = rvalue.toString();
        if(sign != null)
            value = sign.toString() + rvalue.toString();       
        table.put("result", value.toString());
        return table;
    }
}

void getOthers():
{
    Token others;
    Token ovalue;
}
{
    others=<ID> (<SPACE>)* <EQUALS> (<SPACE>)* (<SIGN>)? ovalue=<DIGIT>
    {
        table.put(others.toString(), ovalue.toString());
    }
}

void getData():
{
    Token datum;
}
{
    datum=<DATA> {            
        data += datum.toString();
    }
    
    |

    datum=<DIGIT> {
        data += datum.toString();
    }
}
